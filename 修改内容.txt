修改目录名称，不要包含junit4等字眼

还有一个未写测试的例子

robolectric的对比和好处。考虑效率问题。

在OrderTest里面在加入一个测试的函数

@Afterclass和@Beforeclass注解等

加俩个@before测试下

解释喜爱assert后面的内容

assertThat

is的别的效果，更详细的介绍链接（延展），在加几个介绍例子，介绍更多功能。

写一个正例和反例

介绍下注解

第七页ppt  增加代码

Rule 可以高度可重用的内容，这是切面


查看下mock的官方文档重新写一下含义（ppt 9页） 高度可控性（查看下，）


在什么情景下非用@spy不可，@spy的意义是什么东西。



两个区别时候场景：google不建议使用的原因
Robolectric虽然可以测试跳转等问题，但是实际上两个程序，相当于一个测试环境框架，一个真实的环境，比如Intent的跳转第二个Activity问题
    （1）效果：在JVM上是无法验证的是否能跳转成功，只能验证跳转的Activity是不是和你预计的Activity相同。
        RobolectricTest的buttonOnclick测试用例
    （2）优点：在JVM虚拟机上运行测试用例确实特别快。
    （3）缺点：这是测试用例是否有意义：运用这种测试的时候，确实可以确定自己跳转的Activity，与实际跳转的是否一致，
        但是问题在Android系统中并不仅仅是这些内容，还有在manifest文件中进行注册，而这个问题是JVM上检测不出来的。
        同样的道理server等在不在manifest文件中注册是否能用？jvm肯定是不会报错的。
总结：Robolectric有局限性，建议使用的时候慎重选择，如果可以不用尽量不要用（考虑sharedPreferences和确定资源文件以及
        Intent跳转Activity的比较等）如果对自己代码比较自信，喜欢较快的方式可以选择这个框架
        也不能限制SDK版本。
        现在Robolectric最大API只支持到23，现在应该到26，所以更新会慢，其次在获取到手机真是信息的时候，比如获取手机版本的时候，就无法用本框架进行测试。
时间慢，估应用程序对实际设备硬件的行为至关重要时才最好依靠此方法。




0.mock就是不会对任何真正实例有任何影响。
1.@spy的出现是@mock许多做不到的情况下的产物，可以理解为@mock的重写，因为@mock的函数都是返回null。但是@spy返回的就是实际结果。  正确的看comparisonMockAndSpy（）
2.
@Spy注释的字段可以在声明点被显式初始化。或者，如果您不提供实例，Mockito将尝试查找零参数构造函数（甚至是私有）并为您创建一个实例。
意思也就是的说在获取一个实例的时候，可以不通过new或者别的方式来获取。  正确
3.@spy可以监视真是的事物发生的过程。例如望梅止渴，望梅止渴就相当于@mock，但是吃梅止渴就相当于@spy。
4.@mock不会调用任何的实例，因为调用实例会产生麻烦（比如代理模式，没有接口的类，监视的真实对象+调用的最终方法=麻烦），那么需要保持真实实例与实例中的方法进行交互就需要@spy（不希望被监视的内容意识到交互和实例的影响。）。
5.@spy应该小心使用，
6.上述的@spy是针对对象用的，下面是针对类用的，相对于间谍对象，这是一个间谍基本类，创建间谍基本类，避免提供间谍对象实例，相对于new的好处就是，抽象不能实例化的时候，可以通过@spy进行调用。
7.verify调用真是的情况，用@spy调用真实函数，有两个真实函数，一个函数包含第二个，验证调用了几次。比如有个对象，对象中有个函数。
               注意接口不能使用@Spy         正确

                              for （int i=0，i<10；i++）{
                                 list.add(i)
                                    }

测试函数：@spy对象，@spy list
对象调用函数
verif（list，time（10））.add(any)




1.mock创建出的对象，不能让对象之间存在交互作用，比如用单利模式创建的对象，有个set方法，一个get方法，在代码里面两个类，一个调用了set，里一个方法中直接调用get方法可以获取到值。示例：两个Activity一个单利模式。
2。使用mock注解调用单利模式，打印，然后使用@spy调用单利打印。
3。原因：单元测试必须是最小的，相互之间没有任何联系的内容，加入有了联系就不叫单元测试，比如这个测试本函数还要将上个函数都调用一边，那么这属于集成测试了。